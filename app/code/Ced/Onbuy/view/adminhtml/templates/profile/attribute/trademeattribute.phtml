<?php

/**
 * CedCommerce
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the End User License Agreement(EULA)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://cedcommerce.com/license-agreement.txt
 *
 * @category  Ced
 * @package   Ced_Onbuy
 * @author    CedCommerce Core Team <connect@cedcommerce.com>
 * @copyright Copyright CEDCOMMERCE(http://cedcommerce.com/)
 * @license   http://cedcommerce.com/license-agreement.txt
 */

$element = $block->getElement();
$_htmlId      = 'onbuyAttributes';
$_htmlClass   = 'onbuyAttributeClass';
$_htmlName    = 'onbuy_attributes';
$_readonly    = false;
?>
<div class="field" id="attribute-<?php /* @escapeNotVerified */ echo $_htmlId ?>-container" data-attribute-code="<?php /* @escapeNotVerified */ echo $_htmlId ?>">
    <div id="attr">
        <table class="admin__control-table tiers_table" id="tiers_table">
            <thead>
                <tr>
                    <th class="col-customer-group"><?php /* @escapeNotVerified */ echo __('OnBuy Attribute') ?></th>
                    <th class="col-qty required"><?php /* @escapeNotVerified */ echo __('Magento Catalog Attribute') ?></th>
                    <th class="col-qty required"><?php /* @escapeNotVerified */ echo __('Default Value') ?></th>
                    <th class="col-qty"><?php /* @escapeNotVerified */ echo __('Units') ?></th>
                    <th class="col-delete"><?php /* @escapeNotVerified */ echo __('Action') ?></th>
                </tr>
            </thead>
            <tbody id="<?php /* @escapeNotVerified */ echo $_htmlId ?>_container"></tbody>
            <tfoot>
                <tr>
                    <td colspan="5" class="col-actions-add"><?php echo $block->getChildHtml('add_button') ?></td>
                </tr>
            </tfoot>
        </table>

        <script>
            require([
                'mage/template',
                'Magento_Ui/js/modal/modal',
                "prototype",
                "mage/adminhtml/form"
            ], function(mageTemplate, modal) {

                var onbuyAttributeRowTemplate = '<tr>' +
                    '<input type="hidden" value="0" name="<?php echo $_htmlName ?>[<%- data.index %>][required]" id="cat_dependent_<%- data.index %>_onbuy_required"" />' +
                    '<input type="hidden" name="<?php echo $_htmlName ?>[<%- data.index %>][onbuy_attribute_name]" id="cat_dependent_<%- data.index %>_onbuy_attribute_hidden"" />' +
                    '<input type="hidden" name="<?php echo $_htmlName ?>[<%- data.index %>][onbuy_attribute_type]" id="cat_dependent_<%- data.index %>_onbuy_attribute_type"" />' +
                    '<input data-form-part="onbuy_profile_edit" type="hidden" name="<?php echo $_htmlName ?>[<%- data.index %>][options]" id="cat_dependent_<%- data.index %>_options"" />' +
                    '<td><select onclick="return onbuyAttributeControl.setOnbuyAttributeType(this, <%- data.index %>);" class="<?php echo $_htmlClass ?> custgroup required-entry" name="<?php echo $_htmlName ?>[<%- data.index %>][onbuy_attribute_name]" id="cat_dependent_<%- data.index %>_onbuy_attribute">'

                <?php 
                if(!empty($this->getOnbuyAttributes())){
                foreach ($this->getOnbuyAttributes() as $optGroup) {
                    $disable = '';
                    if ($optGroup['label'] == 'Required Attributes') {
                        $disable = 'disabled="disabled"';
                    }
                ?>
                        +
                        '<optgroup <?php echo  $disable ?> label="<?php echo $optGroup['label'] ?> ">'
                    <?php
                    foreach ($optGroup['value'] as $_groupId => $_groupName) :
                        $attributeEnum = $_groupName/*['_value']*/['onbuy_attribute_enum'];

                        if (is_array($attributeEnum)) {
                            $array = [];
                            foreach ($attributeEnum['value'] as $key => $value) {
                                $array[] = $value['name'] . ':' . $value['value'];
                            }
                            $attributeEnum = implode(",", $array);
                        }
                        $attributeEnum = implode(',', array_map(
                            function ($arg) {
                                return str_replace("\r", "", str_replace("\n", "", trim($arg)));
                            },
                            explode(',', $attributeEnum)
                        ));
                        $attributeEnum = addslashes($attributeEnum);
                       ?>
                            +
                            '<option value="<?php echo addslashes($_groupName/*['_value']*/['onbuy_attribute_name']) ?>" options=\'<?= $_groupName['options'] ?>\' units=\'<?php echo isset($_groupName['units']) ? $_groupName['units'] : "" ?>\' enum_val="<?php echo $attributeEnum; ?>" attribute_type="<?php echo $_groupName/*['_value']*/['onbuy_attribute_type'] ?>" ><?php echo __(addslashes($_groupId)) ?></option>'
                    <?php endforeach
                    ?>
                        +
                        '</optgroup>'
                <?php  } }
                ?>
                    +
                    '</select></td>' +
                    '<td> <select data-form-part="onbuy_profile_edit" onChange="return onbuyAttributeControl.showDefaultField(this, <%- data.index %>);" class="<?php echo $_htmlClass ?> required_magento_attr required-entry" name="<?php echo $_htmlName ?>[<%- data.index %>][magento_attribute_code]" id="cat_dependent_<%- data.index %>_magento_attr">'
                <?php foreach ($this->getMagentoAttributes() as $_groupId => $_groupName) : ?>
                        +
                        "<option value='<?php echo $_groupId ?>' options=\'<?= $_groupName['options'] ?>\' ><?php echo __($_groupName['label']) ?></option>"
                <?php endforeach ?>
                    +
                    '</select>' +
                    ' </td>' +
                    '<td><input data-form-part="onbuy_profile_edit" style="display:none;" type="text" name="<?php /* @escapeNotVerified */ echo $_htmlName ?>[<%- data.index %>][default]" value="" id="cat_dependent_<%- data.index %>_default_text" />' +
                    '<select data-form-part="onbuy_profile_edit" style="display:none;" class="<?php echo $_htmlClass ?> required_magento_attr" name="<?php echo $_htmlName ?>[<%- data.index %>][default]" id="cat_dependent_<%- data.index %>_default_select">' +
                    '</select></td>'
                    +
                    '<td><select data-form-part="onbuy_profile_edit" style="display:none;" class="<?php echo $_htmlClass ?> required_magento_attr_unit" name="<?php echo $_htmlName ?>[<%- data.index %>][units]" id="cat_dependent_<%- data.index %>_units_select">' +
                    '</select></td>'
                    +
                    '<td class="col-delete"><input type="hidden" name="<?php /* @escapeNotVerified */ echo $_htmlName ?>[<%- data.index %>][delete]" class="delete" value="" id="cat_dependent_<%- data.index %>_delete" />' +
                    '<input data-form-part="onbuy_profile_edit" type="hidden" data-form-part="onbuy_profile_edit" name="<?php echo $_htmlName ?>[<%- data.index %>][option_mapping]" id="cat_dependent_<%- data.index %>_option_mapping"" value="{}" />' +
                    '<button title="<?php /* @escapeNotVerified */ echo $block->escapeHtml(__('Map Options')); ?>" type="button" class="action- scalable map icon-btn map-attribute-option" id="cat_dependent_<%- data.index %>_map_option_button"  row_id="<%- data.index %>" id_prefix="cat_dependent_" id_row ="[<%- data.index %>]" onclick="return onbuyAttributeControl.mapOption(this);" disabled>' +
                    '<span><?php /* @escapeNotVerified */ echo __("Map Options") ?></span></button>' +
                    '<button title="<?php /* @escapeNotVerified */ echo $block->escapeHtml(__('Delete Tier')); ?>" type="button" class="action- scalable delete icon-btn delete-product-option" id="cat_dependent_<%- data.index %>_delete_button" onclick="return onbuyAttributeControl.deleteItem(event);">' +
                    '<span><?php /* @escapeNotVerified */ echo __("Delete") ?></span></button></td>' +
                    '</tr>';
                var onbuyAttributeControl = {
                    template: mageTemplate(onbuyAttributeRowTemplate),
                    itemsCount: 0,
                    addItem: function() {
                        <?php if ($_readonly) : ?>
                            if (arguments.length < 5) {
                                return;
                            }
                        <?php endif; ?>
                        var data = {
                            onbuy_attribute: '',
                            magento_attr: '',
                            required: '',
                            onbuy_attribute_type: '',
                            index: this.itemsCount++,
                            default: '',
                            option_mapping: '',
                            options: '',
                            units: ''
                        };
                        /*var units = $("cat_dependent_"+data.index+"_onbuy_attribute")/!*document.getElementById("cat_dependent_"+data.index+"_onbuy_attribute");*!/
                        console.log(data.index);
                        console.log(units);
                        console.log('units');*/

                        //console.log(arguments);
                        if (arguments.length >= 5) {
                            data.onbuy_attribute = arguments[0];
                            data.magento_attr = arguments[1];
                            data.onbuy_attribute_type = arguments[2];
                            data.required = arguments[3];
                            data.default = arguments[4];
                            data.option_mapping = arguments[5];
                            data.options = arguments[6];
                            data.units = arguments[7];
                        }

                        // console.log(data);
                        // console.log('data');

                        Element.insert($('<?php /* @escapeNotVerified */ echo $_htmlId ?>_container'), {
                            bottom: this.template({
                                data: data
                            })
                        });
                        var onbuyAttribute = $('cat_dependent_' + data.index + '_onbuy_attribute');
                        var magentoAttribute = $('cat_dependent_' + data.index + '_magento_attr');
                        onbuyAttribute.value = data.onbuy_attribute;
                        magentoAttribute.value = data.magento_attr;

                        $('cat_dependent_' + data.index + '_onbuy_attribute_type').value = data.onbuy_attribute_type;
                        $('cat_dependent_' + data.index + '_onbuy_attribute').value = data.onbuy_attribute;
                        $('cat_dependent_' + data.index + '_magento_attr').value = data.magento_attr;
                        $('cat_dependent_' + data.index + '_onbuy_attribute_type').value = data.onbuy_attribute_type;
                        $('cat_dependent_' + data.index + '_option_mapping').value = data.option_mapping;
                        $('cat_dependent_' + data.index + '_options').value = data.options;


                        if (data.required == 1) {
                           
                            $('cat_dependent_' + data.index + '_delete_button').remove();
                            $('cat_dependent_' + data.index + '_onbuy_attribute').disabled = true;
                            $('cat_dependent_' + data.index + '_onbuy_attribute_hidden').value = data.onbuy_attribute;
                            $('cat_dependent_' + data.index + '_onbuy_required').value = data.required;
                        } 

                        if (data.readOnly == '1') {
                            ['website', 'cust_group', 'qty', 'price', 'delete'].each(function(idx) {
                                $('cat_dependent_' + data.index + '_' + idx).disabled = true;
                            });
                            $('cat_dependent_' + data.index + '_delete_button').hide();
                        }

                        <?php if ($_readonly) : ?>
                            $('<?php /* @escapeNotVerified */ echo $_htmlId ?>_container').select('input', 'select').each(this.disableElement);
                            $('<?php /* @escapeNotVerified */ echo $_htmlId ?>_container').up('table').select('button').each(this.disableElement);
                        <?php else : ?>
                            $('<?php /* @escapeNotVerified */ echo $_htmlId ?>_container').select('input', 'select').each(function(el) {
                                Event.observe(el, 'change', el.setHasChanges.bind(el));
                            });
                        <?php endif; ?>
                        onbuyAttributeControl.setOnbuyAttributeType(onbuyAttribute, data.index);
                        if (data.default != '') {
                            var enumVal = onbuyAttribute.options[data.index].getAttribute('enum_val');
                            var text = $('cat_dependent_' + data.index + '_default_text');
                            var select = $('cat_dependent_' + data.index + '_default_select');
                            select.value = data.default;
                            text.value = data.default;

                            onbuyAttributeControl.showDefaultField(magentoAttribute, data.index);
                        }
                        if (data.units) {
                            $('cat_dependent_' + data.index + '_units_select').value = data.units;
                        }
                    },
                    disableElement: function(el) {
                        el.disabled = true;
                        el.addClassName('disabled');
                    },
                    deleteItem: function(event) {
                        var tr = Event.findElement(event, 'tr');
                        if (tr) {
                            Element.select(tr, '.delete').each(function(elem) {
                                elem.value = '1'
                            });
                            Element.select(tr, ['input', 'select']).each(function(elem) {
                                elem.hide()
                            });
                            Element.hide(tr);
                            Element.addClassName(tr, 'no-display template');
                        }
                        return false;
                    },
                    showDefaultField: function(e, index) {
                        // console.log(e.options[e.selectedIndex]/*.getAttribute('units')*/);
                        // console.log('eee');

                        var checkdefault = e.options[e.selectedIndex].getAttribute('value');
                        var text = $('cat_dependent_' + index + '_default_text');
                        var select = $('cat_dependent_' + index + '_default_select');


                        var onbuyAttr = $('cat_dependent_' + index + '_onbuy_attribute');
                        var onbuyAttrOptions = JSON.parse(onbuyAttr.options[onbuyAttr.selectedIndex].getAttribute('options'));
                        var magentoAttr = $('cat_dependent_' + index + '_magento_attr');
                        var magentoAttrOptions = magentoAttr.options[magentoAttr.selectedIndex].getAttribute('options');
                        console.log(magentoAttr);

                        if (onbuyAttrOptions != '' && magentoAttrOptions != '') {
                            magentoAttrOptions = JSON.parse(magentoAttrOptions);
                            if (magentoAttrOptions.length > 0) {
                                $('cat_dependent_' + index + '_map_option_button').enable();
                            } else {
                                $('cat_dependent_' + index + '_map_option_button').disable();
                            }
                        } else {
                            $('cat_dependent_' + index + '_map_option_button').disable();
                        }


                        if (checkdefault == 'default') {
                            var onbuyAttribute = $('cat_dependent_' + index + '_onbuy_attribute');
                            var enumVal = onbuyAttribute.options[onbuyAttribute.selectedIndex].getAttribute('enum_val');
                            if (enumVal) {
                                select.enable();
                                select.show();
                            } else {
                                text.enable();
                                text.show();
                            }

                        } else {
                            select.hide();
                            text.hide();
                            select.disable();
                            text.disable();
                        }
                    },
                    saveMapping: function(id, idPrefix) {
                        if (id !== null) {

                            var rows = $$('.attribute_option_row');
                            var mapping = {};
                            if (rows) {
                                rows.forEach(
                                    function(element) {
                                        // console.log(element);
                                        // console.log('element.index');
                                        var rowId = element.getAttribute('row_id');
                                        // console.log(rowId);
                                        // console.log('roowwwww');
                                        if (rowId !== null) {
                                            // console.log(rowId);
                                            // console.log('rowId');
                                            // console.log('option_' + rowId + '_onbuy_attr_option');
                                            var mpcatchAttributeOption =
                                                $('option_' + rowId + '_onbuy_attr_option').value;
                                            var magentoAttributeOption =
                                                $('option_' + rowId + '_mage_attr_option').value;
                                            // console.log(mpcatchAttributeOption);
                                            // console.log(magentoAttributeOption);
                                            // console.log('mpcatchAttributeOptiontesty');
                                            if (mpcatchAttributeOption !== "") {
                                                mapping[magentoAttributeOption] =
                                                    mpcatchAttributeOption === undefined ? "" : mpcatchAttributeOption;
                                            }
                                        }
                                    }
                                );
                            }

                            var mappedOption = $(idPrefix + id + '_option_mapping');
                            // console.log(mappedOption);
                            // console.log('mappedOptiontest');

                            if (mappedOption) {
                                mappedOption.setAttribute('value', JSON.stringify(mapping));
                            }
                        }
                    },
                    mapOption: function(self) {
                        $('attributeOption_container').update('');

                        var id = self.getAttribute("row_id");
                        // console.log(id);
                        // console.log('row_id');
                        var idPrefix = self.getAttribute("id_prefix");
                        
                        var loadOptionsMapping = $(idPrefix + id + '_option_mapping').value;
                       
                        
                        try {
                            loadOptionsMapping = JSON.parse(loadOptionsMapping);
                        } catch (e) {
                            // console.log('fgdfg');
                        }
                        // console.log(loadOptionsMapping);
                        // console.log('loadOptionsMapping');


                        var magentoOptions = '[]';
                        var mpcatchOptions = '[]';
                        // console.log(idPrefix + id);
                        // console.log('ifprefix');
                        // console.log($(idPrefix + id + "_magento_attr").selectedIndex);
                        // console.log(JSON.parse($(idPrefix + id + "_onbuy_attribute").options[$(idPrefix + id + "_onbuy_attribute").selectedIndex].getAttribute('options')));
                        // console.log($(idPrefix + id + "_magento_attr").options[$(idPrefix + id + "_magento_attr").selectedIndex].getAttribute('options'));

                        if ($(idPrefix + id + "_magento_attr").selectedIndex >= 0 &&
                            $(idPrefix + id + "_onbuy_attribute").selectedIndex >= 0) {
                            magentoOptions = JSON.parse($(idPrefix + id + "_onbuy_attribute").options[$(idPrefix + id + "_onbuy_attribute").selectedIndex].getAttribute('options'));
                            mpcatchOptions = JSON.parse($(idPrefix + id + "_magento_attr").options[$(idPrefix + id + "_magento_attr").selectedIndex].getAttribute('options'));
                        }
                        //console.log(magentoOptions);
                         //console.log(magentoOptions);
                        setMPCatchOptions(mpcatchOptions, magentoOptions);
                        // console.log(mpcatchOptions);
                        // console.log('mpcatchOptions');
                        //populate magento attribute
                        /*for (var option in mpcatchOptions) {
                            console.log(JSON.parse(mpcatchOptions));
                            console.log('magentoOptionshh');
                            if (mpcatchOptions.hasOwnProperty(option)) {
                                optionMappingControl.initialize();
                                console.log(option);
                                
                                optionMappingControl.addItem(
                                    option,
                                    loadOptionsMapping[option]
                                );
                            }
                        }*/
                        if (mpcatchOptions.length > 0) {
                            for (var i = 0; i < (mpcatchOptions).length; i++) {
                                if (mpcatchOptions[i]['value'] && mpcatchOptions[i]['value'] != undefined) {
                                    optionMappingControl.initialize();
                                    optionMappingControl.addItem(
                                        mpcatchOptions[i]['value'],
                                        loadOptionsMapping[mpcatchOptions[i]['value']]
                                    );
                                }


                            }
                        }


                        var options = {
                            type: 'popup',
                            responsive: true,
                            innerScroll: true,
                            title: '<?php echo __("Map Magento Attribute Options") ?>',
                            buttons: [{
                                text: jQuery.mage.__('Save Me'),
                                class: '',
                                click: function() {

                                    onbuyAttributeControl.saveMapping(id, idPrefix);
                                    this.closeModal();
                                }
                            }]
                        };

                        var popup = modal(options, jQuery('#popup-modal-customs'));
                        popup.openModal();

                    },
                    setOnbuyAttributeType: function(e, index) {
                        if (e.selectedIndex != -1) {
                            var attributeType = e.options[e.selectedIndex].getAttribute('attribute_type');
                            var options = e.options[e.selectedIndex].getAttribute('options');
                            $('cat_dependent_' + index + '_onbuy_attribute_type').value = attributeType;
                            var enumVal = e.options[e.selectedIndex].getAttribute('enum_val');
                            var text = $('cat_dependent_' + index + '_default_text');
                            var select = $('cat_dependent_' + index + '_default_select');
                            select.hide();
                            text.hide();
                            select.disable();
                            text.disable();


                            if (enumVal) {
                                var values = enumVal.split(",");
                                // console.log(values);
                                // console.log('valuesfordefault');
                                while (select.options.length > 0) {
                                    select.remove(0);
                                }
                                for (i = 0; i < values.length; i++) {
                                    // console.log(values[i]);
                                    // console.log('values123');
                                    var name = values[i].split(":");
                                    select.insert(new Element('option', {
                                        "value": name[1],
                                        "label": name[0]
                                    }).update(values[i], name[0]));
                                }
                            }
                            var catchAttr = $('cat_dependent_' + index + '_onbuy_attribute');
                            var catchAttrOptions = JSON.parse(catchAttr.options[catchAttr.selectedIndex].getAttribute('options'));
                            var magentoAttr = $('cat_dependent_' + index + '_magento_attr');
                            // console.log(magentoAttr);
                            // console.log('magentoAttr');
                            var magentoAttrOptions = magentoAttr.options[magentoAttr.selectedIndex].getAttribute('options');

                            if (catchAttrOptions != '' && magentoAttrOptions != '') {
                                magentoAttrOptions = JSON.parse(magentoAttrOptions);
                                if (magentoAttrOptions.length > 0) {
                                    $('cat_dependent_' + index + '_map_option_button').enable();
                                } else {
                                    $('cat_dependent_' + index + '_map_option_button').disable();
                                }
                            } else {
                                $('cat_dependent_' + index + '_map_option_button').disable();
                            }

                            /*$('mpcatch_attribute_row_' + index + '_attributeType').value = attributeType;
                            $('mpcatch_attribute_row_' + index + '_isMandatory').value = isMandatory;
                            $('mpcatch_attribute_row_' + index + '_inputType').value = inputType;*/
                            $('cat_dependent_' + index + '_options').value = options;


                            var checkunits = $('cat_dependent_' + index + '_onbuy_attribute');
                            var units = checkunits.options[checkunits.selectedIndex].getAttribute('units');
                            var unitSelect = $('cat_dependent_' + index + '_units_select');
                            if (units) {
                                unitSelect.show();
                                // console.log(enumVal);
                                // console.log('enumVal');
                                var valuesForUnits = units.split(",");
                                // console.log(values);
                                // console.log('valuesfordefault');
                                while (unitSelect.options.length > 0) {
                                    unitSelect.remove(0);
                                }
                                // console.log(valuesForUnits[0]);
                                // console.log('valuesForUnits');
                                for (i = 0; i < valuesForUnits.length; i++) {
                                    // console.log(values[i]);
                                    // console.log('values123');
                                    // var uname = valuesForUnits[i].split(":");
                                    unitSelect.insert(new Element('option', {
                                        "value": valuesForUnits[i]
                                    }).update(valuesForUnits[i]));

                                }
                            }
                            // console.log(units);
                            // console.log('unitjs');

                        }
                    }
                };
                <?php if (/*count(*/$this->getMappedAttribute()/*) > 0 */) {

                    foreach ($this->getMappedAttribute() as $_item) :

                        $default = isset($_item['default']) ? $_item['default'] : '';
                ?>
                        onbuyAttributeControl.addItem('<?php echo addslashes($_item/*['_value']*/['onbuy_attribute_name']) ?>', '<?php echo $_item/*['_value']*/['magento_attribute_code'] ?>', '<?php echo $_item/*['_value']*/['onbuy_attribute_type'] ?>', '<?php echo $_item/*['_value']*/['required'] ?>', '<?php echo $default; ?>', '<?= isset($_item['option_mapping']) ? $_item['option_mapping'] : '' ?>', '<?= json_encode(isset($_item['values']) ? $_item['values'] : $_item['options']) ?>', '<?= /*json_encode*/ (isset($_item['units']) ? $_item['units'] : "") ?>');
                <?php endforeach;
                } ?>
                <?php if ($_readonly) :
                ?>
                    $('<?php /* @escapeNotVerified */ echo $_htmlId ?>_container').up('table').select('button')
                        .each(onbuyAttributeControl.disableElement);
                <?php endif; ?>
                //console.log(onbuyAttributeControl);
                window.onbuyAttributeControl = onbuyAttributeControl;

            });
        </script>
    </div>
</div>i
<?php $_htmlId = 'attributeOption';
$_htmlNameOption = "optionMapping";
?>
<div id="popup-modal-customs" style="display: none;">
    <div class="field admin__scope-old" id="attribute-<?php /* @escapeNotVerified */
                                                        echo $_htmlId ?>-container" data-attribute-code="<?php /* @escapeNotVerified */
                                                        echo $_htmlId ?>">
        <div class="control">
            <table class="admin__control-table tiers_table" id="tiers_table">
                <thead>
                    <tr>
                        <th class="col-customer-group"><?php /* @escapeNotVerified */
                                                        echo __('Magento Attribute Option') ?></th>
                        <th class="col-qty required"><?php /* @escapeNotVerified */
                                                        echo __('Onbuy Attribute Option') ?></th>
                        <th class="col-delete"><?php /* @escapeNotVerified */
                                                echo __('Action') ?></th>
                    </tr>
                </thead>
                <tbody id="<?php /* @escapeNotVerified */
                            echo $_htmlId ?>_container"></tbody>
                <tfoot>
                </tfoot>
            </table>
        </div>
    </div>
</div>
<script>
    var optionMappingTemplate = '';

    function setMPCatchOptions(mpcatchOptions, magentoOptions) {
        // console.log('testv');
         console.log(mpcatchOptions);

        //var mpcatchOptions = JSON.parse(mpcatchOptions);
        //var magentoOptions = JSON.parse(magentoOptions);
        var optionsHtml = '';
        if (mpcatchOptions.length > 0) {
            for (var i = 0; i < (mpcatchOptions).length; i++) {
                optionsHtml += '<option value=ytyyt' + mpcatchOptions[i]['value'] + '>' + mpcatchOptions[i]['label'] + '</option>';
            }
        }
        var catchOptionsHtml = '';
        for (var option in magentoOptions) {
            catchOptionsHtml += "<option value='" + option + "'>" + option + "</option>";
        }
       

        optionMappingTemplate = '<tr class="attribute_option_row" row_id="<%- data.index %>">'



            +
            '<td> <select readonly="readonly" class="<?php echo $_htmlClass ?> required_onbuy_attr required-entry" name="<?php echo $_htmlNameOption ?>[<%- data.index %>][mage_attr_option]" id="option_<%- data.index %>_mage_attr_option" row_id = "<%- data.index %>">' +
            optionsHtml +
            '</select>'

            +
            ' </td>'

            +
            '<td>' +
            '<select class="<?php echo $_htmlClass ?> required-entry validate-code input-text admin__control-text required-entry _required" name="<?php echo $_htmlNameOption ?>[<%- data.index %>][onbuy_attr_option]" id="option_<%- data.index %>_onbuy_attr_option">' +
            catchOptionsHtml +
            '</select>' +
            '</td>'


            +
            '<td class="col-delete"><input type="hidden" name="<?php /* @escapeNotVerified */ echo $_htmlNameOption ?>[<%- data.index %>][delete]" class="delete" value="" id="option_<%- data.index %>_delete" />' +
            '<button title="<?php /* @escapeNotVerified */ echo $block->escapeHtml(__('Delete Tier')); ?>" type="button" class="action- scalable delete icon-btn delete-product-option" id="option_<%- data.index %>_delete_button" onclick="return optionMappingControl.deleteItem(event);">' +
            '<span><?php /* @escapeNotVerified */ echo __("Delete") ?></span></button></td>' +
            '</tr>';

    }

    require([
        'mage/template',
        "prototype",
        "mage/adminhtml/form"
    ], function(mageTemplate) {


        optionMappingControl = {
            itemsCount: 0,
            templateRow: '',
            initialize: function() {
                this.templateRow = optionMappingTemplate;
            },
            addItem: function() {
                // console.log(arguments);
                // console.log('testforargumets');
                this.template = mageTemplate(this.templateRow);
                var data = {
                    mage_attr_option: '',
                    mpcatch_attr_option: '',
                    index: this.itemsCount++
                };
                /*var mappedOptions = $('cat_dependent_' + data.index + '_option_mapping').value;
                if (mappedOptions != 'undefined')
                {

                }*/

                if (arguments.length >= 2) {
                    data.mage_attr_option = arguments[0];
                    data.mpcatch_attr_option = arguments[1];
                }

                Element.insert($('<?php /* @escapeNotVerified */ echo $_htmlId ?>_container'), {
                    bottom: this.template({
                        data: data
                    })
                });

                $('option_' + data.index + '_mage_attr_option').value = data.mage_attr_option;
                $('option_' + data.index + '_onbuy_attr_option').value = data.mpcatch_attr_option;
                $('option_' + data.index + '_mage_attr_option').setAttribute('option_id', data.mage_attr_option);
            },
            disableElement: function(el) {
                el.disabled = true;
                el.addClassName('disabled');
            },
            deleteItem: function(event) {
                var tr = Event.findElement(event, 'tr');
                if (tr) {
                    Element.remove(tr);
                }
                return false;
            }
        };



    });
</script>