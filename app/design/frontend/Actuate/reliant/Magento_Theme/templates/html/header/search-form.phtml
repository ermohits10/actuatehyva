<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Magento\Search\Helper\Data as SearchHelper;
use Hyva\Theme\ViewModel\HeroiconsOutline;

// phpcs:disable Magento2.Templates.ThisInTemplate.FoundHelper

/** @var Escaper $escaper */
/** @var Template $block */
/** @var SearchHelper $helper */

/** @var HeroiconsOutline $heroicons */
$heroicons = $viewModels->require(HeroiconsOutline::class);

$helper = $this->helper(SearchHelper::class);
?>
<script>
    'use strict';

    function initMiniSearch() {
        return {
            minSearchLength: <?= (int) $helper->getMinQueryLength() ?>,
            suggestions: [],
            suggest() {
                const search = this.$refs.searchInput;
                if (search.value.length >= this.minSearchLength) {
                    search.setCustomValidity('');
                    search.reportValidity();
                    this.fetchSuggestions(search.value);
                } else {
                    this.suggestions = [];
                }
            },
            fetchSuggestions(term) {
                fetch(
                    window.BASE_URL + 'search/ajax/suggest?' + new URLSearchParams({q: term}),
                    {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    }
                )
                .then(response => response.json())
                .then(result => this.suggestions = result);
            },
            search(term) {
                const search = this.$refs.searchInput;
                term = term || search.value;
                if (term.length < this.minSearchLength) {
                    search.setCustomValidity('<?= $escaper->escapeJs(
                        __('Minimum Search query length is %1', $helper->getMinQueryLength())
                    ) ?>');
                    search.reportValidity();
                } else {
                    search.setCustomValidity('');
                    search.value = term;
                    this.$refs.form.submit();
                }
            },
            focusElement(element) {
                if (element && element.nodeName === "DIV") {
                    element.focus();
                    return true;
                } else {
                    return false;
                }
            }
        }
    }
</script>
<div class="w-full mx-auto text-black" x-data="initMiniSearch()">
     <form class="form minisearch relative" id="search_mini_form" x-ref="form" @submit.prevent="search()"
          action="<?= $escaper->escapeUrl($helper->getResultUrl()) ?>" method="get">
        <label class="hidden" for="search" data-role="minisearch-label">
            <span><?= $escaper->escapeHtml(__('Search')) ?></span>
        </label>
        <input id="search"
               x-ref="searchInput"
               type="search"
               autocomplete="off"
               name="<?= $escaper->escapeHtmlAttr($helper->getQueryParamName()) ?>"
               value="<?= /** @noEscape */ $helper->getEscapedQueryText() ?>"
               placeholder="<?= $escaper->escapeHtmlAttr(__('Search')) ?>"
               maxlength="<?= $escaper->escapeHtmlAttr($helper->getMaxQueryLength()) ?>"
               class="w-full py-2 px-3 text-base font-sans font-medium leading-normal transition appearance-none bg-[#F3F3FF] rounded border border-[#135D63] text-grey-900
                focus:outline-none focus:border-transparent lg:text-lg"
               @focus.once="suggest"
               @input.debounce.300="suggest"
               @keydown.arrow-down.prevent="focusElement($el.querySelector('[tabindex]'))"
        />
         <template x-if="suggestions.length > 0">
             <div class="w-full leading-normal transition appearance-none text-grey-900 flex flex-col mt-1">
                 <template x-for="suggestion in suggestions">
                     <div class="flex justify-between p-2 bg-container-lighter even:bg-container mb-1 cursor-pointer
                                 border border-container hover:bg-container-darker"
                          tabindex="0"
                          @click="search(suggestion.title)"
                          @keydown.enter="search(suggestion.title)"
                          @keydown.arrow-up.prevent="
                              focusElement($event.target.previousElementSibling) || $refs.searchInput.focus()
                          "
                          @keydown.arrow-down.prevent="focusElement($event.target.nextElementSibling)"
                     >
                         <span x-text="suggestion.title"></span>
                         <span x-text="suggestion.num_results"></span>
                     </div>
                 </template>
             </div>
         </template>
        <button type="submit"
                title="<?= $escaper->escapeHtml(__('Search')) ?>"
                class="action search absolute right-1 top-1 bg-[#126366] rounded text-center pl-0.5 w-[30px] h-[30px]"
                aria-label="Search"
        >
            <span class="hidden"><?= $escaper->escapeHtml(__('Search')) ?></span>
            <?= $heroicons->searchHtml("w-6 h-6 text-white pl-1", 25, 25) ?>
        </button>
    </form>
</div>
