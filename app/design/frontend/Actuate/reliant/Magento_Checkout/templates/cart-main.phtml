<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Actuate\ReliantDirectTheme\ViewModel\CommonViewModel;
use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\Cart\CheckoutConfig;
use Magento\Checkout\Block\Cart;
use Magento\Framework\Escaper;

/** @var Cart $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */

/** @var CommonViewModel $commonViewModel */
$commonViewModel = $viewModels->require(CommonViewModel::class);
?>

<?php
/** @var CheckoutConfig $checkoutConfigViewModel */
$checkoutConfigViewModel = $viewModels->require(CheckoutConfig::class);
$serializedCheckoutConfig =  $block->getItemsCount() ? $checkoutConfigViewModel->getSerializedCheckoutConfig() : 'false';

?>
<script>
    window.checkoutConfig = <?= /* @noEscape  */ $serializedCheckoutConfig ?>;
    window.customerData = window.checkoutConfig.customerData;
    window.isCustomerLoggedIn = window.checkoutConfig.isCustomerLoggedIn;
</script>

<script>
    'use strict';
    (function( hyva, undefined ) {
        /**
         * Takes a form element and submits it through fetch,
         * then replaces the result into the document without
         * refreshing the page
         */
        hyva.postCart = (form) => {
            if (!form.action) {
                return;
            }
            const action = form.action;
            const formData = new FormData(form);

            if (!formData.uenc) {
                formData.append('uenc', hyva.getUenc());
            }

            formData.append('form_key', hyva.getFormKey());

            window.fetch(action, {
                method: 'POST',
                body: formData
            }).then((result) => {
                return result.text()
            }).then((content) => {

                hyva.replaceDomElement('#maincontent', content)

            }).catch((error) => {
                console.error(error);
                typeof window.dispatchMessages !== "undefined" && window.dispatchMessages(
                    [{
                        type: "error",
                        text: "<?= $escaper->escapeJs(__("Something went wrong. Please try again.")) ?>"
                    }], 10000
                );
            })
        }
    }( window.hyva = window.hyva || {} ));
</script>
<script>
    function initCartForm(){
        return {
            cartIsEmpty: !!window.checkoutConfig,
            checkCartShouldUpdate(data) {
                const cart = data.cart;

                if (this.cartIsEmpty !== !!window.checkoutConfig) {
                    this.cartIsEmpty = !!window.checkoutConfig;
                    this.reloadCartContent();
                    return;
                }

                if (cart) {
                    if (!window.checkoutConfig) {
                        if (cart.items.length) {
                            this.reloadCartContent();
                        }
                        return;
                    }

                    const roundUp = (number) => {
                        return Math.round(number * 100);
                    }

                    const decimalNumbersAreEqual = (number1, number2) => {
                        return roundUp(number1) === roundUp(number2);
                    }

                    if (window.checkoutConfig && cart) {
                        if (decimalNumbersAreEqual(
                            cart.items.reduce((totalQty, cartItem) => totalQty + cartItem.qty, 0),
                                window.checkoutConfig.quoteData.items_qty
                            ) &&
                            decimalNumbersAreEqual(
                                cart.subtotalAmount,
                                window.checkoutConfig.totalsData.total_segments.find((segment) => segment.code === "subtotal").value
                            )
                        ) {
                            return;
                        }
                    }
                }
                this.reloadCartContent();
            },
            reloadCartContent() {
                window.fetch(window.location.href, {
                    method: "GET"
                }).then((result) => {
                    return result.text()

                }).then((body) => {
                    hyva.setCookie('mage-cache-sessid', '', -1, true);
                    window.checkoutConfig = null;
                    hyva.replaceDomElement('#maincontent', body)

                }).catch((error) => {
                    console.error(error);
                    window.location.reload()
                })
            },
            onStorageChange(event) {
                if (event.key === 'private_content_version') {
                    window.dispatchEvent(new CustomEvent("reload-customer-section-data"));
                }
            }
        }
    }
</script>
<script>
    function initializeTimer() {
        return {
            startHour: 6,
            endHour: 13,
            endMinute: 0,
            holidayList: <?= json_encode($commonViewModel->getFreeDeliveryHolidays()); ?>, 
            weekend: [0, 6],
            days: 0,
            hours: 0,
            minutes: 0,
            seconds: 0,
            remaining: null,

            getNextAvailableDeliveryDate(date) {
                let holidayList = this.holidayList.split(',');
                if (
                    this.weekend.includes(date.getDay()) && 
                    !holidayList.includes(date.toLocaleDateString('en-GB')) && 
                    ((new Date().getDay() === 4 && new Date().getHours() >= this.endHour) ||
                     (new Date().getDay() === 5 && new Date().getHours() < this.endHour))
                ) {
                    return date;
                }
                if (holidayList.includes(date.toLocaleDateString('en-GB')) ||
                    this.weekend.includes(date.getDay()) ||
                    (this.weekend.includes(new Date().getDay()) && date.getDay() === 1) ||
                    (new Date().getHours() >= this.endHour && date.getDay() === 1)) {
                    let tomorrowDate = new Date(date.getTime() + 86400000);
                    return this.getNextAvailableDeliveryDate(tomorrowDate);
                }
                return date;
            },
            setRemaining() {
                const diff = new Date(new Date().setHours(this.endHour, this.endMinute, 0, 0)).getTime() - new Date().getTime();
                this.remaining = parseInt(diff / 1000);
                this.setTime();
            },
            getDays() {
                return {
                    value: Math.floor(this.remaining / 86400),
                    remaining: this.remaining % 86400
                };
            },
            getHours() {
                const daysRemaining = this.getDays().remaining;
                return {
                    value: Math.floor(daysRemaining / 3600),
                    remaining: daysRemaining % 3600
                };
            },
            getMinutes() {
                const hoursRemaining = this.getHours().remaining;
                return {
                    value: Math.floor(hoursRemaining / 60),
                    remaining: hoursRemaining % 60
                };
            },
            getSeconds() {
                return {
                    value: this.getMinutes().remaining
                };
            },
            format(value) {
                return ("0" + parseInt(value)).slice(-2);
            },
            setTime() {
                this.days = this.format(this.getDays().value);
                this.hours = this.format(this.getHours().value);
                this.minutes = this.format(this.getMinutes().value);
                this.seconds = this.format(this.getSeconds().value);
            },
            init() {
                this.setRemaining();
                setInterval(() => this.setRemaining(), 1000);
            }
        }
    }
</script>
<?php
    $holidays = $commonViewModel->getFreeDeliveryHolidays();
    $today = date('d/m/Y');
    $weekday = date('w');
    $nowtime = date('G');
    if($weekday != '0' & $weekday != '6' & $nowtime <= '12'):
    if (str_contains($holidays, $today)):

    else:
?>
    <div x-data="initializeTimer()" x-init="init()" class="w-full timer flex flex-row flex-wrap text-center py-2.5 text-white text-sm lg:text-base leading-5 font-semibold bg-[#2D6265] rounded mb-6 justify-center content-center">
        <p class="mb-0 content-center"><?= __('Order within')?></p>
        <span x-text="hours" class="flex ml-2.5 w-7 h-7 bg-[#0D292C] rounded content-center place-content-center leading-7"></span><span class="content-center ml-1">Hrs</span>
        <span x-text="minutes" class="ml-2.5 flex w-7 h-7 bg-[#0D292C] content-center rounded place-content-center leading-7"></span><span class="content-center ml-1">Min</span>
        <span x-text="seconds" class="ml-2.5 flex w-7 h-7 bg-[#0D292C] content-center rounded place-content-center leading-7"></span><span class="content-center ml-1">Secs</span>
        <span class="ml-2.5 mb-0 content-center"><?= __('for Next Day Delivery')?></span>
    </div>
<?php endif; endif; ?>
<div x-data="initCartForm()"
     class="cart-form clearfix"
     @private-content-loaded.window="checkCartShouldUpdate($event.detail.data)"
     @storage.window="onStorageChange($event)"
>
    <?php if ($block->getItemsCount()): ?>
        <?= $block->getChildHtml('with-items') ?>
    <?php else: ?>
        <?= $block->getChildHtml('no-items') ?>
    <?php endif; ?>
</div>
